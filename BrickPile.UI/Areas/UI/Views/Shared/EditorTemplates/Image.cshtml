@using System.Configuration
@using System.Web.Configuration
@using BrickPile.UI.Common
@model BrickPile.UI.Web.Image
@{
    var maxRequestLength = 4194304;
    // Set the maximum file size for uploads in bytes.
    var section = ConfigurationManager.GetSection("system.web/httpRuntime") as HttpRuntimeSection;
    if (section != null) {
        // Retreive the maximum request length from the web.config and convert to bytes.
        maxRequestLength = (section.MaxRequestLength * 1024);
    }
}
<div id="@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)">
    <span class="centerbox">
        @if(Model == null || string.IsNullOrEmpty(Model.VirtualPath)) {
            <img src="http://placehold.it/60x38" alt="" height="38" width="60"/>
        } else {
            <img src="data:image/png;base64,@Convert.ToBase64String(@Model.Thumbnail)" alt="" height="38" width="60" />
        }
    </span>
    @Html.TextBoxFor(x => Model.AltText, new { placeholder = ViewData.ModelMetadata.Watermark, @class = "alttext" })
    <div class="btn-group">
        <button class="btn btn-large browse" type="button">Browse...</button>
        <button class="btn btn-large dropdown-toggle" data-toggle="dropdown" type="button">
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            <li><a class="clear">Clear</a></li>
        </ul>        
    </div>
    @Html.HiddenFor(x => x.Id, new { @class = "id" })
    @Html.HiddenFor(x => x.ContentType, new { @class = "contentType" })
    @Html.HiddenFor(x => x.ContentLength, new { @class = "contentLength" })
    @Html.HiddenFor(x => x.Name, new { @class = "name" })
    @Html.HiddenFor(x => x.DateUploaded, new { @class = "dateUploaded" })
    @Html.HiddenFor(x => x.VirtualPath, new { @class = "virtualPath" })
    @Html.HiddenFor(x => x.Url, new { @class = "url" })
    @Html.HiddenFor(x => x.Thumbnail, new { @class = "thumbnail" })
    @Html.HiddenFor(x => x.Width, new { @class = "width" })
    @Html.HiddenFor(x => x.Height, new { @class = "height" })
</div>

@Html.Partial("_AssetsDialog", maxRequestLength)

@Html.Section(@<script type="text/javascript" src="@Url.Content("~/areas/ui/scripts/properties/virtualfileproperty.js")"></script>, "scripts")

@Html.Section(
    @<script type="text/javascript">
         (function ($) {
             // Shorthand for the application namespace
             var app = brickpile.app;
             // Initialize the main view.
             app.@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty) = new VirtualFilePropertyView({ el: $('#@ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty)'), maxRequestLength: @maxRequestLength });
         })(jQuery);  
     </script>
, "scripts")